1)
int a=-1; 
output(a);
for( a=1;2;5;)
{
    output(a);
} 
int b;
input(b); $

2) MERGE SORT
int merge(int arr[5], int l, int m, int r) 
{ 
	int i;
    int j;
    int k; 
	int none = m - l + 1; 
	int ntwo = r - m; 
	int L[none];
    int R[ntwo]; 
    int start = 0;
    int step = 1;
    int end = none-1;
	for (i = start;step;end;) 
	{
        int index = l+i;
        L[i] = arr[index];
    } 
    end = ntwo-1;
	for (j = start;steo;end;) 
	{
        int index = m + 1 + j;
        R[j] = arr[index];
    } 
	i = 0; 
	j = 0;
	k = l;
	while (i < none && j < ntwo) 
	{ 
		if (L[i] <= R[j]) 
		{ 
			arr[k] = L[i]; 
			i = i+1;; 
		} ;
		if(L[i] > R[j])
		{ 
			arr[k] = R[j]; 
			j = j +1;; 
		} ;
		k = k+1;
	} 
	while (i < none) 
	{ 
		arr[k] = L[i]; 
		i = i+1; 
		k = k+1;
	} 

	while (j < ntwo) 
	{ 
		arr[k] = R[j]; 
		j = j+1; 
		k = k+1; 
	} 
    return 0;
} 

int mergeSort(int arr[5], int l, int r) 
{ 
	if (l < r) 
	{ 
		int m = l+((r-l)/2); 
		int result = mergeSort(arr, l, m); 
        int temp = m+1;
		result = mergeSort(arr, temp, r); 

		result = merge(arr, l, m, r); 
	};
    return 0;
} 

int arr[5];
int arrsize;
input(arrsize);
int i;
int start = 0;
int step = 1;
int end = arrsize-1;
for(i=start;step;end;)
{
    input(arr[i]);
} 
 
for(i=start;step;end;)
{
    output(arr[i]);
}  

int temp = arrsize-1;
int result = mergeSort(arr, 0, temp); 

for(i=start;step;end;)
{
    output(arr[i]);
}  $

3)
int a = 2 + 3; output(a); $
